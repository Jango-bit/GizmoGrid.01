// <auto-generated />
using System;
using GizmoGrid._01.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GizmoGrid._01.Migrations
{
    [DbContext(typeof(CodePlannerDbContext))]
    [Migration("20250611070313_Schema12")]
    partial class Schema12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GizmoGrid._01.Entity.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlowDiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlowDiagramId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.FlowDiagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("FlowDiagrams");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FlowDiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageSize")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionY")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FlowDiagramId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.SchemaDiagram", b =>
                {
                    b.Property<Guid>("SchemaDiagramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SchemaDiagramId");

                    b.HasIndex("UserId");

                    b.ToTable("SchemaDiagrams");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.TableColumn", b =>
                {
                    b.Property<Guid>("TableColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ForeignKeyReferenceColumnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryKey")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<Guid>("TableNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TableColumnId");

                    b.HasIndex("ForeignKeyReferenceColumnId");

                    b.HasIndex("TableNodeId");

                    b.ToTable("TableColumns");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.TableEdges", b =>
                {
                    b.Property<Guid>("EdgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchemaDiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EdgeId");

                    b.HasIndex("SchemaDiagramId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("TableEdges");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.TableNode", b =>
                {
                    b.Property<Guid>("TableNodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionY")
                        .HasColumnType("real");

                    b.Property<Guid>("SchemaDiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TableNodeId");

                    b.HasIndex("SchemaDiagramId");

                    b.ToTable("TableNodes");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.Edge", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.FlowDiagram", "FlowDiagram")
                        .WithMany("Edges")
                        .HasForeignKey("FlowDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoGrid._01.Entity.Node", "SourceNode")
                        .WithMany("IncomingEdges")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoGrid._01.Entity.Node", "TargetNode")
                        .WithMany("OutgoingEdges")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlowDiagram");

                    b.Navigation("SourceNode");

                    b.Navigation("TargetNode");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.FlowDiagram", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.Project", "Project")
                        .WithMany("FlowDiagrams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoGrid._01.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.Node", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.FlowDiagram", "FlowDiagram")
                        .WithMany("Nodes")
                        .HasForeignKey("FlowDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowDiagram");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.Project", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.SchemaDiagram", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.TableColumn", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.SchemaEntity.TableColumn", "ForeignKeyReferenceColumn")
                        .WithMany()
                        .HasForeignKey("ForeignKeyReferenceColumnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoGrid._01.Entity.SchemaEntity.TableNode", "TableNode")
                        .WithMany("Columns")
                        .HasForeignKey("TableNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForeignKeyReferenceColumn");

                    b.Navigation("TableNode");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.TableEdges", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.SchemaEntity.SchemaDiagram", "SchemaDiagram")
                        .WithMany()
                        .HasForeignKey("SchemaDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoGrid._01.Entity.SchemaEntity.TableNode", "SourceNode")
                        .WithMany("OutgoingEdges")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoGrid._01.Entity.SchemaEntity.TableNode", "TargetNode")
                        .WithMany("IncomingEdges")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SchemaDiagram");

                    b.Navigation("SourceNode");

                    b.Navigation("TargetNode");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.TableNode", b =>
                {
                    b.HasOne("GizmoGrid._01.Entity.SchemaEntity.SchemaDiagram", "SchemaDiagram")
                        .WithMany()
                        .HasForeignKey("SchemaDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchemaDiagram");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.FlowDiagram", b =>
                {
                    b.Navigation("Edges");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.Node", b =>
                {
                    b.Navigation("IncomingEdges");

                    b.Navigation("OutgoingEdges");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.Project", b =>
                {
                    b.Navigation("FlowDiagrams");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.SchemaEntity.TableNode", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("IncomingEdges");

                    b.Navigation("OutgoingEdges");
                });

            modelBuilder.Entity("GizmoGrid._01.Entity.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
